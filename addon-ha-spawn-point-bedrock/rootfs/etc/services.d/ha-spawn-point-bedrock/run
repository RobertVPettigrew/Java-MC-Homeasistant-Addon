#!/usr/bin/with-contenv bashio
# shellcheck shell=bash

# ==============================================================================
# Configure andStart the example service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

# Add your code here

# Declare variables
DOWNLOAD_SAVE_DIR=/data/download
INSTALL_DIR=/data/bedrock_server
RUN_VERSION=$(bashio::config 'version')

# Stores the location of this library
__HASP_LIB_DIR=$(dirname "${BASH_SOURCE[0]}")
readonly __HASP_LIB_DIR

# shellcheck disable=SC1091
source "${__HASP_LIB_DIR}/hasp_config.sh"
# shellcheck disable=SC1091
source "${__HASP_LIB_DIR}/hasp_user.sh"
# shellcheck disable=SC1091
source "${__HASP_LIB_DIR}/hasp_versions.sh"

## Print banner
#./banner.sh

## EULA check
EULA=$(bashio::config 'eula')
if [[ ${EULA^^} != TRUE ]]; then
  bashio::log.red "EULA must be set to TRUE to indicate agreement with the Minecraft End User License"
  bashio::log.red "See https://minecraft.net/terms"
  bashio::log.red "Current value is '${EULA}'"
  exit 1
fi

if [[ "$RUN_VERSION" = "LATEST" ]]; then
  curl https://mc-bds-helper.vercel.app/api/latest -o /data/latest_version_download_link.txt > /dev/null 2>&1
  if [[ -f "/data/latest_version_download_link.txt" ]]; then
    DOWNLOAD_URL=$(cat /data/latest_version_download_link.txt)
    bashio::log.green "Download URL '${DOWNLOAD_URL}'"
    #DOWNLOAD_URL=https://minecraft.azureedge.net/bin-linux/bedrock-server-1.20.41.02.zip
  fi
else
  DOWNLOAD_URL=$(hasp::version "${RUN_VERSION}")
  bashio::log.yellow "Download URL ${DOWNLOAD_URL}"
fi

if [ -z "$DOWNLOAD_URL" ]; then
  ## set a default download file
  DOWNLOAD_FILE=bedrock-server-1.20.41.02.zip
  DOWNLOAD_URL="https://minecraft.azureedge.net/bin-linux/${DOWNLOAD_FILE}"
else
  DOWNLOAD_FILE="${DOWNLOAD_URL##*/}"
fi


if [[ ! -d  ${DOWNLOAD_SAVE_DIR} ]]; then
  bashio::log.yellow "Creating Download Directory"
  mkdir ${DOWNLOAD_SAVE_DIR}
  chmod -R 777 ${DOWNLOAD_SAVE_DIR}
fi

if [[ ! -f "${DOWNLOAD_SAVE_DIR}/${DOWNLOAD_FILE}" ]]; then
  bashio::log.yellow "Download ${DOWNLOAD_FILE} started ... please wait"
  curl "${DOWNLOAD_URL}" -o "${DOWNLOAD_SAVE_DIR}/${DOWNLOAD_FILE}" -# -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36" > /dev/null 2>&1
else
  bashio::log.green "${DOWNLOAD_FILE} already downloaded"
fi

if [[ ! -d  ${INSTALL_DIR} ]]; then
  bashio::log.yellow "Creating Install Directory"
  mkdir ${INSTALL_DIR}
  chmod -R 777 ${INSTALL_DIR}
fi

SERVER_FILE_NAME="${DOWNLOAD_FILE%.*}"

if [[ ! -f "${INSTALL_DIR}/${SERVER_FILE_NAME}" ]]; then
  bashio::log.yellow "Removing old version"
  hasp::version.cleanup "${INSTALL_DIR}"
  bashio::log.yellow "Installing new version"
  unzip -q -o "${DOWNLOAD_SAVE_DIR}/${DOWNLOAD_FILE}" -d ${INSTALL_DIR}
  mv "${INSTALL_DIR}/bedrock_server" "${INSTALL_DIR}/${SERVER_FILE_NAME}"
else
  bashio::log.green "${DOWNLOAD_FILE} already Installed"
fi

cd "${INSTALL_DIR}" || exit 1

#create server configuration based on ha ui configuration
bashio::log "Create Bedrock Server Configuration"
hasp::config "/data/options.json" "./server.properties"
hasp::user "/data/options.json" "./allowlist.json"
hasp::user.permissions "/data/options.json" "./permissions.json"

#prepare and start bedrock server
bashio::log "Starting Bedrock Server"
chmod a+x "./${SERVER_FILE_NAME}"
export LD_LIBRARY_PATH=.
"./${SERVER_FILE_NAME}"



#exec python3 /usr/bin/mc_port_proxy.py &
## Run your program
#exec /usr/bin/my_program
